{
  "$schema": "https://raw.githubusercontent.com/microsoft/vscode/master/extensions/json-language-features/schema/tmLanguage.schema.json",
  "name": "TypePy",
  "scopeName": "source.typepy",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#decorators"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#function-def"
    },
    {
      "include": "#function-call"
    },
    {
      "include": "#class-def"
    },
    {
      "include": "#variable-bindings"
    },
    {
      "include": "#loop-variables"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.typepy",
          "match": "#.*$"
        }
      ]
    },
    "decorators": {
      "patterns": [
        {
          "name": "meta.decorator.typepy",
          "match": "@[A-Za-z_][\\w]*"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.block.typepy",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            {
              "include": "#string-escape"
            }
          ]
        },
        {
          "name": "string.quoted.single.block.typepy",
          "begin": "'''",
          "end": "'''",
          "patterns": [
            {
              "include": "#string-escape"
            }
          ]
        },
        {
          "name": "string.quoted.double.typepy",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "include": "#string-escape"
            }
          ]
        },
        {
          "name": "string.quoted.single.typepy",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "include": "#string-escape"
            }
          ]
        }
      ]
    },
    "string-escape": {
      "patterns": [
        {
          "name": "constant.character.escape.typepy",
          "match": "\\\\."
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.typepy",
          "match": "\\b\\d[\\d_]*\\.\\d[\\d_]*(?:[eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.typepy",
          "match": "\\b\\d[\\d_]*\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.typepy",
          "match": "\\b(if|else|for|in|while|switch|case|default|break|continue|try|catch|throw|finally|return|guard|pass)\\b"
        },
        {
          "name": "keyword.declaration.typepy",
          "match": "\\b(class|struct|enum|def|let|final|static|private|public|const|import|from|as)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.typepy",
          "match": "\\b(int8|int16|int32|int64|uint8|uint16|uint32|uint64|float32|float64|string|bool)\\b\\??"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.typepy",
          "match": "\\b(None|true|false)\\b"
        }
      ]
    },
    "function-def": {
      "patterns": [
        {
          "name": "meta.function.definition.typepy",
          "match": "\\b(def)\\s+([A-Za-z_][\\w]*)",
          "captures": {
            "1": {
              "name": "keyword.declaration.function.typepy"
            },
            "2": {
              "name": "entity.name.function.typepy"
            }
          }
        }
      ]
    },
    "function-call": {
      "patterns": [
        {
          "name": "meta.function-call.typepy",
          "match": "\\b(?!if\\b|else\\b|for\\b|in\\b|while\\b|switch\\b|case\\b|default\\b|break\\b|continue\\b|return\\b|guard\\b|pass\\b|class\\b|struct\\b|enum\\b|def\\b|let\\b|final\\b|static\\b|private\\b|public\\b|const\\b|import\\b|from\\b|as\\b)([A-Za-z_][\\w]*)\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.call.typepy"
            }
          }
        },
        {
          "name": "meta.method-call.typepy",
          "match": "(?<=\\.)\\s*([A-Za-z_][\\w]*)\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.method.typepy"
            }
          }
        }
      ]
    },
    "class-def": {
      "patterns": [
        {
          "name": "meta.class.typepy",
          "match": "\\b(class|struct|enum)\\s+([A-Za-z_][\\w]*)",
          "captures": {
            "1": {
              "name": "keyword.declaration.class.typepy"
            },
            "2": {
              "name": "entity.name.type.typepy"
            }
          }
        }
      ]
    },
    "variable-bindings": {
      "patterns": [
        {
          "name": "meta.variable.binding.typepy",
          "match": "\\b(let|final|const)\\s+([A-Za-z_][\\w]*)",
          "captures": {
            "1": {
              "name": "keyword.declaration.variable.typepy"
            },
            "2": {
              "name": "variable.other.declaration.typepy"
            }
          }
        },
        {
          "name": "meta.parameter.typepy",
          "begin": "(\\()",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.parameters.begin.typepy"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parameters.end.typepy"
            }
          },
          "patterns": [
            {
              "match": "\\b([A-Za-z_][\\w]*)\\s*(:)",
              "captures": {
                "1": {
                  "name": "variable.parameter.typepy"
                },
                "2": {
                  "name": "punctuation.separator.type-annotation.typepy"
                }
              }
            }
          ]
        }
      ]
    },
    "loop-variables": {
      "patterns": [
        {
          "name": "meta.iteration.typepy",
          "match": "\\b(for)\\s+([A-Za-z_][\\w]*)\\s+(in)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.typepy"
            },
            "2": {
              "name": "variable.other.readwrite.typepy"
            },
            "3": {
              "name": "keyword.operator.word.typepy"
            }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.typepy",
          "match": "(\\?\\?|\\?\\.|\\!|\\=\\>|\\-\\>|\\+\\=|\\-\\=|\\*\\=|\\/\\=|\\%\\=|\\&\\=|\\|\\=|\\^\\=|\\=\\=|\\!\\=|\\<\\=|\\>\\=|\\<\\<|\\>\\>|\\&\\&|\\|\\||\\.{2,3}|\\:|\\,)"
        }
      ]
    }
  }
}
